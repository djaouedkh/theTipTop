generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Table Utilisateur (User)
model User {
  id                Int                @id @default(autoincrement()) @map("id")
  firstname         String             @map("firstname")
  lastname          String             @map("lastname")
  email             String             @unique @map("email")
  password          String             @map("password")
  createdAt         DateTime           @default(now()) @map("created_at")
  tickets           Ticket[]           // Relation avec les tickets achetés
  roleId            Int                @map("role_id") // Référence à un rôle unique
  role              Role               @relation(fields: [roleId], references: [id])
  prizeDistributions PrizeDistribution[] // Relation inverse avec PrizeDistribution
  
  @@map("user")
}


// Table Rôle (Role)
model Role {
  id    Int    @id @default(autoincrement()) @map("id")
  name  String @unique @map("name")
  users User[] // Les utilisateurs peuvent avoir plusieurs rôles

  @@map("role")
}

// Table Ticket (Code)
model Ticket {
  id           Int      @id @default(autoincrement()) @map("id")
  ref          String   @unique @map("ref")
  status       Boolean  @default(false) @map("status")
  issuedDate   DateTime @default(now()) @map("issued_date")
  userId       Int?      @map("user_id")
  user         User?     @relation(fields: [userId], references: [id])
  prizeId      Int     @map("prize_id") // Relation optionnelle avec Prize (si un prix est gagné)
  prize        Prize   @relation(fields: [prizeId], references: [id])
  eventId      Int     @map("event_id") // Relation optionnelle avec Event
  event        Event   @relation(fields: [eventId], references: [id]) // Relation inverse ajoutée avec Event

  @@map("ticket")
}

// Table Lot (Prize)
model Prize {
  id           Int       @id @default(autoincrement()) @map("id")
  name         String    @map("name")
  desc         String    @map("description")
  type         String    @map("type") // Type de lot (infuseur, boîte de thé, etc.)
  price        Float     @map("price")
  tickets      Ticket[]  // Tickets associés au lot
  distributions PrizeDistribution[] // Suivi des lots distribués

  @@map("prize")
}

// Table Distribution des lots (PrizeDistribution)
model PrizeDistribution {
  id          Int      @id @default(autoincrement()) @map("id")
  isClaimed   Boolean  @default(false) @map("is_claimed") // Statut de réclamation
  dateClaimed DateTime? @map("date_claimed")
  prizeId     Int      @map("prize_id") // Le lot réclamé
  prize       Prize    @relation(fields: [prizeId], references: [id])
  userId      Int      @map("user_id") // L'utilisateur qui a réclamé
  user        User     @relation(fields: [userId], references: [id]) // Relation avec User
  storeId     Int?     @map("store_id") // Si le lot est réclamé en magasin
  store       Store?   @relation(fields: [storeId], references: [id])

  @@map("prize_distribution")
}

// Table Magasin (Store)
model Store {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @map("name")
  address     String   @map("address")
  city        String   @map("city")
  postalCode  String   @map("postal_code")
  distributions PrizeDistribution[] // Lots réclamés dans ce magasin

  @@map("store")
}

// Table Événement (Event)
model Event {
  id          Int      @id @default(autoincrement()) @map("id")
  name        String   @map("name")
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")
  tickets       Ticket[] // Relation avec les tickets pour cet événement

  @@map("event")
}
